services:
  # MongoDB Replica Set (3 nodes)
  mongo-primary:
    image: mongo:4.4
    platform: linux/arm64
    container_name: flexi-mongo-primary
    restart: unless-stopped
    ports:
      - "27017:27017"
    command: |
      mongod --replSet rs --bind_ip_all --port 27017 --oplogSize 256
    volumes:
      - mongo_primary_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - flexi-network

  mongo-secondary1:
    image: mongo:4.4
    platform: linux/arm64
    container_name: flexi-mongo-secondary1
    restart: unless-stopped
    ports:
      - "27018:27017"
    command: |
      mongod --replSet rs --bind_ip_all --port 27017 --oplogSize 256
    volumes:
      - mongo_secondary1_data:/data/db
    depends_on:
      - mongo-primary
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - flexi-network

  mongo-secondary2:
    image: mongo:4.4
    platform: linux/arm64
    container_name: flexi-mongo-secondary2
    restart: unless-stopped
    ports:
      - "27019:27017"
    command: |
      mongod --replSet rs --bind_ip_all --port 27017 --oplogSize 256
    volumes:
      - mongo_secondary2_data:/data/db
    depends_on:
      - mongo-primary
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - flexi-network

  # MongoDB Replica Set Initialization
  mongo-setup:
    image: mongo:4.4
    platform: linux/arm64
    container_name: flexi-mongo-setup
    restart: "no"
    depends_on:
      mongo-primary:
        condition: service_healthy
      mongo-secondary1:
        condition: service_healthy
      mongo-secondary2:
        condition: service_healthy
    command: |
      bash -c "
        sleep 10
        echo 'Configuring MongoDB replica set...'
        mongo --host mongo-primary:27017 --eval '
          rs.initiate({
            _id: \"rs\",
            members: [
              { _id: 0, host: \"mongo-primary:27017\", priority: 2 },
              { _id: 1, host: \"mongo-secondary1:27017\", priority: 1 },
              { _id: 2, host: \"mongo-secondary2:27017\", priority: 1 }
            ]
          })
        '
        echo 'Waiting for replica set to be ready...'
        until mongo --host mongo-primary:27017 --eval 'rs.status().ok' --quiet; do
          sleep 5
        done
        echo 'Replica set configured successfully'
      "
    networks:
      - flexi-network

  # Redis
  redis:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: flexi-redis
    restart: unless-stopped
    ports:
      - "6380:6379"  # Changed to avoid conflict with existing Redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - flexi-network

  # SMTP Server (for email testing) - using smtp4dev which supports arm64
  smtp4dev:
    image: rnwood/smtp4dev:latest
    container_name: flexi-smtp4dev
    restart: unless-stopped
    ports:
      - "1026:25"    # SMTP port (changed to avoid conflict)
      - "8025:80"    # Web UI port
    networks:
      - flexi-network

  # Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flexi-backend
    restart: unless-stopped
    ports:
      - "3443:3443"   # HTTPS
    env_file:
      - .env.docker
    environment:
      - NODE_ENV=development  # Enable development mode for hot reloading
    volumes:
      - ./backend/logs:/app/backend/logs
      - ./backend/bin/cert.local.miwide.com:/app/backend/bin/cert.local.miwide.com:ro  # SSL certificates
      - ./frontend/src:/app/frontend/src:ro        # Mount frontend source for hot reloading
      - ./frontend/public:/app/frontend/public:ro  # Mount frontend public assets
      # Backend source code hot reloading
      - ./backend/routes:/app/backend/routes       # API routes
      - ./backend/controllers:/app/backend/controllers  # Controllers
      - ./backend/models:/app/backend/models       # Database models
      - ./backend/deviceLogic:/app/backend/deviceLogic  # Device logic
      - ./backend/utils:/app/backend/utils         # Utilities
      - ./backend/middleware:/app/backend/middleware    # Middleware
      - ./backend/services:/app/backend/services   # Services
      - ./backend/websocket:/app/backend/websocket # WebSocket handlers
      - ./backend/periodic:/app/backend/periodic   # Periodic tasks
      - ./backend/logging:/app/backend/logging     # Logging modules
      - ./backend/notifications:/app/backend/notifications  # Notifications
      - ./backend/applicationLogic:/app/backend/applicationLogic  # Application logic
      - ./backend/billing:/app/backend/billing     # Billing modules
      - ./backend/broker:/app/backend/broker       # Message broker
      - ./backend/constants:/app/backend/constants # Constants
      - ./backend/limiters:/app/backend/limiters   # Rate limiters
      - ./backend/migrations:/app/backend/migrations # Database migrations
    depends_on:
      mongo-setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      smtp4dev:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -sf --max-time 5 http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - flexi-network

  # Frontend development service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: flexi-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - DANGEROUSLY_DISABLE_HOST_CHECK=true
      - HOST=0.0.0.0
    depends_on:
      - backend
    networks:
      - flexi-network

volumes:
  mongo_primary_data:
  mongo_secondary1_data:
  mongo_secondary2_data:
  redis_data:

networks:
  flexi-network:
    driver: bridge