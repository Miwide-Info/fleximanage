services:
  # MongoDB Replica Set (3 nodes) - Optimized
  mongo-primary:
    image: mongo:4.4
    platform: linux/arm64
    container_name: flexi-mongo-primary
    restart: unless-stopped
    ports:
      - "27017:27017"
    command: |
      mongod --replSet rs --bind_ip_all --port 27017 --oplogSize 256 
             --wiredTigerCacheSizeGB 0.5 --wiredTigerCollectionBlockCompressor snappy
    volumes:
      - mongo_primary_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - flexi-network
    # Resource limits for optimal performance
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  mongo-secondary1:
    image: mongo:4.4
    platform: linux/arm64
    container_name: flexi-mongo-secondary1
    restart: unless-stopped
    ports:
      - "27018:27017"
    command: |
      mongod --replSet rs --bind_ip_all --port 27017 --oplogSize 256
             --wiredTigerCacheSizeGB 0.25 --wiredTigerCollectionBlockCompressor snappy
    volumes:
      - mongo_secondary1_data:/data/db
    depends_on:
      - mongo-primary
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - flexi-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  mongo-secondary2:
    image: mongo:4.4
    platform: linux/arm64
    container_name: flexi-mongo-secondary2
    restart: unless-stopped
    ports:
      - "27019:27017"
    command: |
      mongod --replSet rs --bind_ip_all --port 27017 --oplogSize 256
             --wiredTigerCacheSizeGB 0.25 --wiredTigerCollectionBlockCompressor snappy
    volumes:
      - mongo_secondary2_data:/data/db
    depends_on:
      - mongo-primary
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - flexi-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # MongoDB Replica Set Initialization
  mongo-setup:
    image: mongo:4.4
    platform: linux/arm64
    container_name: flexi-mongo-setup
    restart: "no"
    depends_on:
      mongo-primary:
        condition: service_healthy
      mongo-secondary1:
        condition: service_healthy
      mongo-secondary2:
        condition: service_healthy
    command: |
      bash -c "
        sleep 10
        echo 'Configuring MongoDB replica set...'
        mongo --host mongo-primary:27017 --eval '
          rs.initiate({
            _id: \"rs\",
            members: [
              { _id: 0, host: \"mongo-primary:27017\", priority: 2 },
              { _id: 1, host: \"mongo-secondary1:27017\", priority: 1 },
              { _id: 2, host: \"mongo-secondary2:27017\", priority: 1 }
            ]
          })
        '
        echo 'Waiting for replica set to be ready...'
        until mongo --host mongo-primary:27017 --eval 'rs.status().ok' --quiet; do
          sleep 5
        done
        echo 'Replica set configured successfully'
      "
    networks:
      - flexi-network

  # Redis - Optimized
  redis:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: flexi-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: |
      redis-server --save 900 1 --save 300 10 --save 60 10000 
                   --maxmemory 256mb --maxmemory-policy allkeys-lru
                   --tcp-keepalive 300 --timeout 0
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - flexi-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # SMTP Server (for email testing)
  smtp4dev:
    image: rnwood/smtp4dev:latest
    container_name: flexi-smtp4dev
    restart: unless-stopped
    ports:
      - "1026:25"
      - "8025:80"
    networks:
      - flexi-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Backend - Optimized
  backend:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      args:
        NODE_ENV: production
    container_name: flexi-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3443:3443"
    environment:
      NODE_ENV: production
      NODE_OPTIONS: "--max-old-space-size=1024"
      UV_THREADPOOL_SIZE: 4
      MONGO_URL: mongodb://mongo-primary:27017,mongo-secondary1:27017,mongo-secondary2:27017/flexiwan?replicaSet=rs&readPreference=secondaryPreferred
      MONGO_ANALYTICS_URL: mongodb://mongo-primary:27017,mongo-secondary1:27017,mongo-secondary2:27017/flexiwanAnalytics?replicaSet=rs&readPreference=secondaryPreferred
      MONGO_BILLING_URL: mongodb://mongo-primary:27017,mongo-secondary1:27017,mongo-secondary2:27017/flexibilling?replicaSet=rs&readPreference=secondaryPreferred
      MONGO_VPN_URL: mongodb://mongo-primary:27017,mongo-secondary1:27017,mongo-secondary2:27017/flexivpn?replicaSet=rs&readPreference=secondaryPreferred
      REDIS_URL: redis://redis:6379
      SMTP_HOST: smtp4dev
      SMTP_PORT: 25
    depends_on:
      mongo-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -sf --max-time 5 http://localhost:3000/api/performance/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - flexi-network
    volumes:
      - ./backend/bin/cert.local.miwide.com:/app/bin/cert.local.miwide.com:ro
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Frontend - Optimized (Optional: if serving separately)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.optimized
    container_name: flexi-frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - flexi-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

volumes:
  mongo_primary_data:
    driver: local
  mongo_secondary1_data:
    driver: local
  mongo_secondary2_data:
    driver: local
  redis_data:
    driver: local

networks:
  flexi-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: flexi-br0
    ipam:
      config:
        - subnet: 172.20.0.0/16